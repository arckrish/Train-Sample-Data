# PIPELINE DEFINITION
# Name: sonar-get-data-train
components:
  comp-get-data:
    executorLabel: exec-get-data
    outputDefinitions:
      artifacts:
        data_output_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-train-model:
    executorLabel: exec-train-model
    inputDefinitions:
      artifacts:
        data_input_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        model_output_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-upload-model:
    executorLabel: exec-upload-model
    inputDefinitions:
      artifacts:
        input_model_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-get-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - get_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef get_data(data_output_path: OutputPath()):\n    import urllib.request\n\
          \    print(\"starting download...\")\n    url = \"https://github.com/arckrish/Train-Sample-Data.git/main/data/sonar.csv\"\
          \n    urllib.request.urlretrieve(url, data_output_path)\n    print(\"done\"\
          )\n\n"
        image: quay.io/arckrish/custom-wb-images:jupyter-pytorch-ubi8-python-3.9-vz1.0_20240711
    exec-train-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'tf2onnx' 'seaborn'\
          \ 'pandas' 'torch' 'torch.nn' 'torch.optim' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_model(data_input_path: InputPath(), model_output_path:\
          \ OutputPath()):\n    import numpy as np\n    import pandas as pd\n    import\
          \ torch\n    import tf2onnx\n    import onnx\n    import torch.nn as nn\n\
          \    import torch.optim as optim\n    from torch.utils.data import DataLoader\n\
          \    from sklearn.preprocessing import LabelEncoder\n    from sklearn.model_selection\
          \ import train_test_split\n\n    # Read data, convert to NumPy arrays\n\
          \    data = pd.read_csv(\"data/sonar.csv\", header=None)\n    X = data.iloc[:,\
          \ 0:60].values\n    y = data.iloc[:, 60].values\n    data.head()\n\n   \
          \ # encode class values as integers\n    encoder = LabelEncoder()\n    encoder.fit(y)\n\
          \    y = encoder.transform(y)\n\n    # convert into PyTorch tensors\n  \
          \  X = torch.tensor(X, dtype=torch.float32)\n    y = torch.tensor(y, dtype=torch.float32).reshape(-1,\
          \ 1)\n\n    # train-test split for evaluation of the model\n    X_train,\
          \ X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True)\n\
          \n    # set up DataLoader for training set\n    loader = DataLoader(list(zip(X_train,\
          \ y_train)), shuffle=True, batch_size=16)\n\n\n    # create model\n    model\
          \ = nn.Sequential(\n        nn.Linear(60, 60),\n        nn.ReLU(),\n   \
          \     nn.Linear(60, 30),\n        nn.ReLU(),\n        nn.Linear(30, 1),\n\
          \        nn.Sigmoid()\n    )\n\n\n    # Train the model\n    n_epochs =\
          \ 200\n    loss_fn = nn.BCELoss()\n    optimizer = optim.SGD(model.parameters(),\
          \ lr=0.1)\n    model.train()\n    for epoch in range(n_epochs):\n      \
          \  for X_batch, y_batch in loader:\n            y_pred = model(X_batch)\n\
          \            loss = loss_fn(y_pred, y_batch)\n            optimizer.zero_grad()\n\
          \            loss.backward()\n            optimizer.step()\n\n    # Save\
          \ the model as ONNX for easy use of ModelMesh\n\n    model_proto, _ = tf2onnx.convert.from_keras(model)\n\
          \    print(model_output_path)\n    onnx.save(model_proto, model_output_path)\n\
          \n"
        image: quay.io/arckrish/custom-wb-images:jupyter-pytorch-ubi8-python-3.9-vz1.0_20240711
    exec-upload-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'boto3' 'botocore'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_model(input_model_path: InputPath()):\n    import os\n\
          \    import boto3\n    import botocore\n\n    aws_access_key_id = os.environ.get('AWS_ACCESS_KEY_ID')\n\
          \    aws_secret_access_key = os.environ.get('AWS_SECRET_ACCESS_KEY')\n \
          \   endpoint_url = os.environ.get('AWS_S3_ENDPOINT')\n    region_name =\
          \ os.environ.get('AWS_DEFAULT_REGION')\n    bucket_name = os.environ.get('AWS_S3_BUCKET')\n\
          \n    s3_key = os.environ.get(\"S3_KEY\")\n\n    session = boto3.session.Session(aws_access_key_id=aws_access_key_id,\n\
          \                                    aws_secret_access_key=aws_secret_access_key)\n\
          \n    s3_resource = session.resource(\n        's3',\n        config=botocore.client.Config(signature_version='s3v4'),\n\
          \        endpoint_url=endpoint_url,\n        region_name=region_name)\n\n\
          \    bucket = s3_resource.Bucket(bucket_name)\n\n    print(f\"Uploading\
          \ {s3_key}\")\n    bucket.upload_file(input_model_path, s3_key)\n\n"
        env:
        - name: S3_KEY
          value: models/sonar/1/model.onnx
        image: quay.io/arckrish/custom-wb-images:jupyter-pytorch-ubi8-python-3.9-vz1.0_20240711
pipelineInfo:
  name: sonar-get-data-train
root:
  dag:
    tasks:
      get-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-get-data
        taskInfo:
          name: get-data
      train-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-model
        dependentTasks:
        - get-data
        inputs:
          artifacts:
            data_input_path:
              taskOutputArtifact:
                outputArtifactKey: data_output_path
                producerTask: get-data
        taskInfo:
          name: train-model
      upload-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-upload-model
        dependentTasks:
        - train-model
        inputs:
          artifacts:
            input_model_path:
              taskOutputArtifact:
                outputArtifactKey: model_output_path
                producerTask: train-model
        taskInfo:
          name: upload-model
schemaVersion: 2.1.0
sdkVersion: kfp-2.8.0
---
platforms:
  kubernetes:
    deploymentSpec:
      executors:
        exec-upload-model:
          secretAsEnv:
          - keyToEnv:
            - envVar: AWS_ACCESS_KEY_ID
              secretKey: AWS_ACCESS_KEY_ID
            - envVar: AWS_SECRET_ACCESS_KEY
              secretKey: AWS_SECRET_ACCESS_KEY
            - envVar: AWS_DEFAULT_REGION
              secretKey: AWS_DEFAULT_REGION
            - envVar: AWS_S3_BUCKET
              secretKey: AWS_S3_BUCKET
            - envVar: AWS_S3_ENDPOINT
              secretKey: AWS_S3_ENDPOINT
            secretName: aws-connection-my-storage
